sudo: required

# This moves Kubernetes specific config files.
env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - K8S_VERSION="v1.10.0"
    - MINIKUBE_VERSION="v0.28.2"
    - HELM_VERSION="v2.10.0-linux-amd64"
    - HELM_REPO_VERSION="2.0.0"

before_script:
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
# TODO: remove the --bootstrapper flag once this issue is solved: https://github.com/kubernetes/minikube/issues/2704
- sudo minikube config set WantReportErrorPrompt false
- sudo -E minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC
# Add nsenter binary
- sudo docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter
# Fix the kubectl context, as it's often stale.
# - minikube update-context
- curl -Lo helm.tar.gz https://kubernetes-helm.storage.googleapis.com/helm-${HELM_VERSION}.tar.gz
- tar -xf helm.tar.gz
- sudo mv linux-amd64/helm /usr/local/bin/
- rm -rf linux-amd64
- sudo pip install planemo
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
# Set up helm
- helm init --wait
- helm repo add galaxy-helm-repo https://pcm32.github.io/galaxy-helm-charts


script:
- kubectl cluster-info
- docker build -t test/galaxy-sc-tertiary:v18.05 -f Docker_init .
- helm install -f helm-configs/.travis-tertiary-portals-galaxy-18.05-minukube.yaml --version $HELM_REPO_VERSION galaxy-helm-repo/galaxy-stable
- ./util/wait-for-deployment -n default -t 360 $(kubectl get deployment | awk '{ print $1 }' | grep 'galaxy-stable$')
- planemo lint -r --report_level error tools

notifications:
  email: false
